{"version":3,"sources":["components/task.js","components/textInput.js","components/todo.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","task","taskStatus","done","className","onClick","id","content","TextInput","state","value","handleChange","bind","handleKeyUp","event","this","setState","target","trim","keyCode","onEnterPress","type","onKeyUp","onChange","React","Component","Todo","tasks","addTask","updateTask","taskId","newTasks","map","taskToUpdate","find","slice","newTask","length","push","taskList","key","style","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAiBeA,G,MAdF,SAASC,GAAQ,IACpBC,EAASD,EAATC,KACFC,EAAaD,EAAKE,KAAO,OAAS,OACxC,OACE,yBACEC,UAAS,wBAAmBF,GAC5BG,QAAS,kBAAML,EAAMK,QAAQJ,EAAKK,MAElC,yBAAKF,UAAU,aACf,uBAAGA,UAAU,eAAeH,EAAKM,YCsBxBC,E,kDA/Bb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CAAEC,MAAO,IACtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAJF,E,yDAONE,GACXC,KAAKC,SAAS,CAAEN,MAAOI,EAAMG,OAAOP,U,kCAG1BI,GACV,IAAMJ,EAAQI,EAAMG,OAAOP,MAAMQ,OACX,KAAlBJ,EAAMK,SAA4B,KAAVT,IAC1BK,KAAKf,MAAMoB,aAAaL,KAAKN,MAAMC,OACnCK,KAAKC,SAAS,CAAEN,MAAO,Q,+BAKzB,OACE,2BACEW,KAAK,OACLX,MAAOK,KAAKN,MAAMC,MAClBY,QAASP,KAAKF,YACdU,SAAUR,KAAKJ,mB,GA1BCa,IAAMC,WC6CfC,E,kDA1Cb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXkB,MAAO,IAET,EAAKC,QAAU,EAAKA,QAAQhB,KAAb,gBACf,EAAKiB,WAAa,EAAKA,WAAWjB,KAAhB,gBAND,E,uDASRkB,GACTf,KAAKC,UAAS,YAAgB,IACtBe,EADqB,EAAZJ,MACQK,KAAI,SAAC/B,GAAD,sBAAgBA,MACrCgC,EAAeF,EAASG,MAAK,SAACjC,GAAD,OAAUA,EAAKK,KAAOwB,KAEzD,OADAG,EAAa9B,MAAQ8B,EAAa9B,KAC3B,CAAEwB,MAAOI,Q,8BAIZxB,GACNQ,KAAKC,UAAS,YAAgB,IAAbW,EAAY,EAAZA,MACTI,EAAWJ,EAAMQ,QACjBC,EAAU,CAAE9B,GAAIqB,EAAMU,OAAS,EAAG9B,UAASJ,MAAM,GAEvD,OADA4B,EAASO,KAAKF,GACP,CAAET,MAAOI,Q,+BAIV,IAAD,OACDQ,EAAWxB,KAAKN,MAAMkB,MAAMK,KAAI,SAAC/B,GACrC,OAAO,kBAAC,EAAD,CAAMA,KAAMA,EAAMuC,IAAKvC,EAAKK,GAAID,QAAS,EAAKwB,gBAEvD,OACE,yBAAKY,MAAO,CAAEC,OAAQ,SACpB,oCACCH,EACD,6BACA,kBAAC,EAAD,CAAWnB,aAAcL,KAAKa,e,GArCnBJ,IAAMC,WCIVkB,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c3c1c99.chunk.js","sourcesContent":["import React from 'react';\nimport '../task.css';\n\nconst Task = function(props) {\n  const { task } = props;\n  const taskStatus = task.done ? 'done' : 'todo';\n  return (\n    <div\n      className={`taskContainer ${taskStatus}`}\n      onClick={() => props.onClick(task.id)}\n    >\n      <div className=\"taskIcon\"></div>\n      <p className=\"taskContent\">{task.content}</p>\n    </div>\n  );\n};\n\nexport default Task;\n","import React from 'react';\n\nclass TextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleKeyUp(event) {\n    const value = event.target.value.trim();\n    if (event.keyCode === 13 && value !== '') {\n      this.props.onEnterPress(this.state.value);\n      this.setState({ value: '' });\n    }\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        value={this.state.value}\n        onKeyUp={this.handleKeyUp}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default TextInput;\n","import React from 'react';\nimport Task from './task';\nimport TextInput from './textInput';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: []\n    };\n    this.addTask = this.addTask.bind(this);\n    this.updateTask = this.updateTask.bind(this);\n  }\n\n  updateTask(taskId) {\n    this.setState(({ tasks }) => {\n      const newTasks = tasks.map((task) => ({ ...task }));\n      const taskToUpdate = newTasks.find((task) => task.id === taskId);\n      taskToUpdate.done = !taskToUpdate.done;\n      return { tasks: newTasks };\n    });\n  }\n\n  addTask(content) {\n    this.setState(({ tasks }) => {\n      const newTasks = tasks.slice();\n      const newTask = { id: tasks.length + 1, content, done: false };\n      newTasks.push(newTask);\n      return { tasks: newTasks };\n    });\n  }\n\n  render() {\n    const taskList = this.state.tasks.map((task) => {\n      return <Task task={task} key={task.id} onClick={this.updateTask} />;\n    });\n    return (\n      <div style={{ margin: '10em' }}>\n        <h3>TODO</h3>\n        {taskList}\n        <br />\n        <TextInput onEnterPress={this.addTask} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/todo';\n\nfunction App() {\n  return <Todo />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}